@using System.Collections;
@using WebApplication1.Controllers;

@model RimStatsModel

<h1 style="color:white">What's your stats?</h1>

@using (Html.BeginForm())
{
    @Html.HiddenFor(model=>Model.ChildhoodBackstoryIndex,  new { @id = "backstoryChildIndex"})
    @Html.HiddenFor(model=>Model.AdultBackstoryIndex,  new { @id = "backstoryAdultIndex"})

    @for (int i = 0; i < Model.Subjects.Length; i++)
    {
        @Html.HiddenFor(model=>Model.Subjects[i].Name)
        @Html.HiddenFor(model=>Model.Subjects[i].PassionVal, new { @id = "subjectDataPassion_"+Model.Subjects[i].Name })
        @Html.HiddenFor(model=>Model.Subjects[i].Level, new { @id = "subjectDataLevel_"+Model.Subjects[i].Name })
        @Html.HiddenFor(model=>Model.Subjects[i].Disabled, new { @id = "subjectDataDisabled_"+Model.Subjects[i].Name })
        <input type="hidden" id="backstoryChildStatMod_@Model.Subjects[i].Name" value="0">
        <input type="hidden" id="backstoryAdultStatMod_@Model.Subjects[i].Name" value="0">

    }

    @for (int i = 0; i < Model.childhoodBackstoryList.Length; i++)
    {
        @Html.HiddenFor(model=>Model.childhoodBackstoryList[i].Name, new { @id = "backstoryChildName_"+Model.childhoodBackstoryList[i].Name })
        @Html.HiddenFor(model=>Model.childhoodBackstoryList[i].Description, new { @id = "backstoryChildDescription_"+Model.childhoodBackstoryList[i].Name, @value=Model.childhoodBackstoryList[i].Description})
        <input type="hidden" id="backstoryChildStatChangeLength_@Model.childhoodBackstoryList[i].Name" value="@Model.childhoodBackstoryList[i].SubjectStatChanges.Count">
        <input type="hidden" id="backstoryChildDisabledTaskLength_@Model.childhoodBackstoryList[i].Name" value="@Model.childhoodBackstoryList[i].DisabledTasks.Length">

        for (int j = 0; j < Model.childhoodBackstoryList[i].SubjectStatChanges.Count; j++)
        {
            @Html.HiddenFor(model=>Model.childhoodBackstoryList[i].SubjectStatChanges[j].Name, new { @id = "backstoryChildStatChangeName_"+Model.childhoodBackstoryList[i].Name+j, @value=Model.childhoodBackstoryList[i].SubjectStatChanges[j].Name})
            @Html.HiddenFor(model=>Model.childhoodBackstoryList[i].SubjectStatChanges[j].Level, new { @id = "backstoryChildStatChangeLevel_"+Model.childhoodBackstoryList[i].Name+j,  @value=Model.childhoodBackstoryList[i].SubjectStatChanges[j].Level})
        }
        for (int j = 0; j < Model.childhoodBackstoryList[i].DisabledTasks.Length; j++)
        {
            @Html.HiddenFor(model=>Model.childhoodBackstoryList[i].DisabledTasks[j], new { @id = "backstoryChildDisabledTask_"+Model.childhoodBackstoryList[i].Name+j })

        }
    }

    @for (int i = 0; i < Model.adultBackstoryList.Length; i++)
    {
        @Html.HiddenFor(model=>Model.adultBackstoryList[i].Name, new { @id = "backstoryAdultName_"+Model.adultBackstoryList[i].Name })
        @Html.HiddenFor(model=>Model.adultBackstoryList[i].Description, new { @id = "backstoryAdultDescription_"+Model.adultBackstoryList[i].Name, @value=Model.adultBackstoryList[i].Description})
        <input type="hidden" id="backstoryAdultStatChangeLength_@Model.adultBackstoryList[i].Name" value="@Model.adultBackstoryList[i].SubjectStatChanges.Count">
        <input type="hidden" id="backstoryAdultDisabledTaskLength_@Model.adultBackstoryList[i].Name" value="@Model.adultBackstoryList[i].DisabledTasks.Length">

        for (int j = 0; j < Model.adultBackstoryList[i].SubjectStatChanges.Count; j++)
        {
            @Html.HiddenFor(model=>Model.adultBackstoryList[i].SubjectStatChanges[j].Name, new { @id = "backstoryAdultStatChangeName_"+Model.adultBackstoryList[i].Name+j, @value=Model.adultBackstoryList[i].SubjectStatChanges[j].Name})
            @Html.HiddenFor(model=>Model.adultBackstoryList[i].SubjectStatChanges[j].Level, new { @id = "backstoryAdultStatChangeLevel_"+Model.adultBackstoryList[i].Name+j,  @value=Model.adultBackstoryList[i].SubjectStatChanges[j].Level})
        }
        for (int j = 0; j < Model.adultBackstoryList[i].DisabledTasks.Length; j++)
        {
            @Html.HiddenFor(model=>Model.adultBackstoryList[i].DisabledTasks[j], new { @id = "backstoryAdultDisabledTask_"+Model.adultBackstoryList[i].Name+j })

        }
    }


    @*Background*@
    <div class="my-2">
        <h2 class="col-lg-12 text-center" style="color:white">Background</h2>
        <div class="d-flex justify-content-start gap-1">
            <div>
                <p class="text-center" style="color:white">
                    First Name
                </p>
                <p>
                    @Html.TextBoxFor(s=>s.FirstName)
                </p>
            </div>
            <div>
                <p class="text-center" style="color:white">
                    Nickname
                </p>
                <p>
                    @Html.TextBoxFor(s=>s.NickName)
                </p>
            </div>
            <div>
                <p class="text-center" style="color:white">
                    Last Name
                </p>
                <p>
                    @Html.TextBoxFor(s=>s.LastName)
                </p>
            </div>
        </div>
    </div>
    @*Backstories*@
    <div class="accordion" id="accordionBackstories">
        @*Childhood backstories*@
        <div class="accordion-item bg-dark">
            <h2 class="accordion-header">
                <button class="accordion-button bg-secondary" type="button" data-bs-toggle="collapse" data-bs-target="#collapse_BackstoryChild" aria-expanded="false" aria-controls="collapse_BackstoryChild">
                    <h5 id="backstoryChildHeader" style="color:white">Childhood Backstory: Colony Child</h5>
                </button>
            </h2>
            <div id="collapse_BackstoryChild" class="accordion-collapse collapse" data-bs-parent="#accordionBackstories">
                <div class="accordion-body gap-1">
                    <div class="border p-1 d-flex">
                        <div class="col-6">
                            <h3 style="color:white" id="backstoryChildDisplayName">Name</h3>
                            <p style="color:white" id="backstoryChildDisplayDescription">Description</p>
                        </div>
                        <div class="col-3">
                            <p style="color:white">Skill Modifiers</p>
                            <ul id="backstoryChildSkills">
                            </ul>
                        </div>
                        <div class="col-3">
                            <p style="color:white">Disabled Tasks</p>
                            <ul id="backstoryChildDisabled">
                            </ul>
                        </div>

                    </div>
                    @for (int i = 0; i < Model.childhoodBackstoryList.Length; i++)
                    {
                        <button type="button" class="btn btn-primary" onclick="applyBackstory('@Model.childhoodBackstoryList[i].Name','true',@i)">@Model.childhoodBackstoryList[i].Name</button>
                    }
                </div>
            </div>
        </div>
        @*Adult backstories*@
        <div class="accordion-item bg-dark">
            <h2 class="accordion-header">
                <button class="accordion-button bg-secondary" type="button" data-bs-toggle="collapse" data-bs-target="#collapse_BackstoryAdult" aria-expanded="false" aria-controls="collapse_BackstoryAdult">
                    <h5 id="backstoryAdultHeader" style="color:white">Adult Backstory: Colonist</h5>
                </button>
            </h2>
            <div id="collapse_BackstoryAdult" class="accordion-collapse collapse" data-bs-parent="#accordionBackstories">
                <div class="accordion-body gap-1">
                    <div class="border p-1 d-flex">
                        <div class="col-6">
                            <h3 style="color:white" id="backstoryAdultDisplayName">Name</h3>
                            <p style="color:white" id="backstoryAdultDisplayDescription">Description</p>
                        </div>
                        <div class="col-3">
                            <p style="color:white">Skill Modifiers</p>
                            <ul id="backstoryAdultSkills">
                            </ul>
                        </div>
                        <div class="col-3">
                            <p style="color:white">Disabled Tasks</p>
                            <ul id="backstoryAdultDisabled">
                            </ul>
                        </div>

                    </div>
                    @for (int i = 0; i < Model.adultBackstoryList.Length; i++)
                    {
                        <button type="button" class="btn btn-primary" onclick="applyBackstory('@Model.adultBackstoryList[i].Name','false',@i)">@Model.adultBackstoryList[i].Name</button>
                    }
                </div>
            </div>
        </div>
    </div>

    @*Traits*@
    <div class="my-2">
        <h2 class="col-lg-12 text-center" style="color:white">Traits</h2>
    </div>

    @*Subjects*@
    <div class="my-2">
        <h2 class="col-lg-12 text-center" style="color:white">Subjects</h2>

        <div class="accordion" id="accordion1">
            @foreach (RimworldSubjectData subject in Model.Subjects)
            {
                <div class="accordion-item bg-dark">
                    @*Subject Header*@
                    <h2 class="accordion-header">
                        <button class="accordion-button bg-secondary gap-1" type="button" data-bs-toggle="collapse" data-bs-target="#collapse_@subject.Name" aria-expanded="false" aria-controls="collapse_@subject.Name">
                            <h5 style="color:white">@subject.Name</h5>
                            <h5 id="modifierName_@subject.Name" style="color:white"></h5>
                            <h5 id="familiarityDisplay_@subject.Name" style="color:white">(Barely heard of it)</h5>
                            <h5 id="passionDisplay_@subject.Name" style="color:white"></h5>
                        </button>
                    </h2>

                    <div id="collapse_@subject.Name" class="accordion-collapse collapse" data-bs-parent="#accordion1">
                        <div class="accordion-body">
                            @*Passion slider*@
                            <div class="col-12">
                                <label for="passionRange_@subject.Name" class="form-label" style="color:white">How would you feel doing @subject.Name work?</label>
                                <div class="d-flex justify-content-center align-items-center">
                                    @*Minus Button*@
                                    <button type="button" class="btn btn-dark" onclick="nudgeValue(-1,'passionRange_@subject.Name')">
                                        <i class="bi-emoji-frown fs-3" style="color:white"></i>
                                    </button>
                                    @*Range Slider*@
                                    <input type="range" class="form-range  px-3" min="0" max="4" id="passionRange_@subject.Name" oninput="showPassionVal(this.value,'@subject.Name')" onchange="showPassionVal(this.value,'@subject.Name')">
                                    @*Plus Button*@
                                    <button type="button" class="btn btn-dark" onclick="nudgeValue(1,'passionRange_@subject.Name')">
                                        <i class="bi-emoji-smile fs-3" style="color:white"></i>
                                    </button>

                                </div>
                                <p id="passionText_@subject.Name" class="d-flex justify-content-center align-items-center" style="color:white">Aight</p>
                            </div>

                            @*Skill slider*@
                            <div class="col-12">
                                <label for="skillRange_@subject.Name" class="form-label" style="color:white">How good are you at @subject.Name work?</label>
                                <div class="d-flex justify-content-center align-items-center">
                                    @*Minus Button*@
                                    <button type="button" class="btn btn-dark" onclick="nudgeValue(-1,'skillRange_@subject.Name')">
                                        <i class="bi bi-arrow-left-circle fs-3" style="color:white"></i>
                                    </button>
                                    @*Range Slider*@
                                    <input type="range" class="form-range  px-3" min="0" max="20" id="skillRange_@subject.Name" oninput="showSkillVal(this.value,'@subject.Name')" onchange="showSkillVal(this.value,'@subject.Name')">
                                    @*Plus Button*@
                                    <button type="button" class="btn btn-dark" onclick="nudgeValue(1,'skillRange_@subject.Name')">
                                        <i class="bi bi-arrow-right-circle  fs-3" style="color:white"></i>
                                    </button>

                                </div>
                                <p id="skillText_@subject.Name" class="d-flex justify-content-center align-items-center" style="color:white">Barely heard of it</p>
                            </div>

                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <button type="submit" class="btn btn-primary btn-lg align-content-center my-3">Finish</button>
}
<script>

    var subjArray = new Array();
    subjArray = @Html.Raw(Json.Serialize(Model.Subjects));

    //init default values
    subjArray.forEach((subj) => document.getElementById('passionRange_' + subj.name).defaultValue = 1);
    subjArray.forEach((subj) => document.getElementById('skillRange_' + subj.name).defaultValue = 0);

    applyBackstory("Colony Child", "true", 0);
    applyBackstory("Colonist", "false", 0);

    function applyBackstory(backstoryName, isChild, index) {
        isChild = isChild == "true";
        var preface = isChild ? "backstoryChild" : "backstoryAdult";
        var altPreface = isChild ? "backstoryAdult" : "backstoryChild";
        var headerPreface = isChild ? "Childhood Backstory: " : "Adult Backstory: ";
        var altHeaderPreface = isChild ? "Adult Backstory: " : "Childhood Backstory: ";
        var description = document.getElementById(preface + 'Description_' + backstoryName).value;
        var statChangeCount = document.getElementById(preface + 'StatChangeLength_' + backstoryName).value;
        var disabledTaskCount = document.getElementById(preface + 'DisabledTaskLength_' + backstoryName).value;
        var backgroundIndexData = document.getElementById(preface + "Index");
        document.getElementById(preface + "Header").innerHTML = headerPreface + backstoryName;

        var nameDisplay = document.getElementById(preface + 'DisplayName');
        var descriptionDisplay = document.getElementById(preface + 'DisplayDescription');
        var statChangeList = document.getElementById(preface + 'Skills');
        var taskDisabledList = document.getElementById(preface + 'Disabled');

        while (statChangeList.firstChild) {
            statChangeList.removeChild(statChangeList.firstChild);
        }
        while (taskDisabledList.firstChild) {
            taskDisabledList.removeChild(taskDisabledList.firstChild);
        }

        subjArray.forEach((subj) => {
            document.getElementById(preface + 'StatMod_' + subj.name).value = 0;
            var modDisplay = document.getElementById("modifierName_" + subj.name);
            var totalModBonus = 0;
            totalModBonus += parseInt(document.getElementById('backstoryChildStatMod_' + subj.name).value);
            totalModBonus += parseInt(document.getElementById('backstoryAdultStatMod_' + subj.name).value);
            if (totalModBonus == 0) {
                modDisplay.innerHTML = "";
            } else if (totalModBonus > 0) {
                modDisplay.innerHTML = "+" + totalModBonus;
            } else {
                modDisplay.innerHTML = totalModBonus;
            }

            var skillRange = document.getElementById("skillRange_" + subj.name);
            skillRange.disabled = false;

        });


        nameDisplay.innerHTML = backstoryName;
        descriptionDisplay.innerHTML = description;

        for (let i = 0; i < parseInt(statChangeCount); i++) {
            var skillName = document.getElementById(preface + 'StatChangeName_' + backstoryName + i).value;
            var skillLevel = parseInt(document.getElementById(preface + 'StatChangeLevel_' + backstoryName + i).value);
            var rangeSlider = document.getElementById('skillRange_' + skillName);
            var modDisplay = document.getElementById("modifierName_" + skillName);
            var aggrigateSkillLevel = parseInt(document.getElementById(altPreface + 'StatMod_' + skillName).value);
            aggrigateSkillLevel = aggrigateSkillLevel + skillLevel;

            if (skillLevel > 0) {
                rangeSlider.max = 20 - aggrigateSkillLevel;
            } else {
                rangeSlider.min = 0 - aggrigateSkillLevel;
            }

            document.getElementById(preface + 'StatMod_' + skillName).value = skillLevel;

            var textnode = document.createElement('li');
            var text = skillLevel > 0 ? skillName + " +" + skillLevel : skillName + " " + skillLevel;
            textnode.innerHTML = text;
            textnode.style['color'] = 'white';
            statChangeList.appendChild(textnode);

            if (aggrigateSkillLevel == 0) {
                modDisplay.innerHTML = "";
            } else if (aggrigateSkillLevel > 0) {
                modDisplay.innerHTML = "+" + aggrigateSkillLevel;
            } else {
                modDisplay.innerHTML = aggrigateSkillLevel;
            }

        }

        var disabledSubjects = [];
        for (let i = 0; i < parseInt(disabledTaskCount); i++) {
            var taskText = document.getElementById(preface + 'DisabledTask_' + backstoryName + i).value;

            var textnode = document.createElement('li');
            textnode.innerHTML = taskText;
            textnode.style['color'] = 'white';
            taskDisabledList.appendChild(textnode);

            switch (taskText) {
                case "Violent":
                    disabledSubjects.push("Shooting");
                    disabledSubjects.push("Melee");
                    break;
                case "Skilled Labor":
                    disabledSubjects.push("Construction");
                    disabledSubjects.push("Mining");
                    disabledSubjects.push("Cooking");
                    disabledSubjects.push("Plants");
                    disabledSubjects.push("Crafting");
                    break;
                case "Caring":
                    disabledSubjects.push("Medical");
                    break;
                case "Dumb Labor":
                    break;
                default:
                    disabledSubjects.push(taskText);
                    break;
            }
        }
        var currentAltBackstoryName = document.getElementById(altPreface + "Header").innerHTML
        currentAltBackstoryName = currentAltBackstoryName.split(altHeaderPreface)[1];
        var altDisabledTaskCount = parseInt(document.getElementById(altPreface + 'DisabledTaskLength_' + currentAltBackstoryName).value);
        for (let i = 0; i < parseInt(altDisabledTaskCount); i++) {
            var taskText = document.getElementById(altPreface + 'DisabledTask_' + currentAltBackstoryName + i).value;

            switch (taskText) {
                case "Violent":
                    disabledSubjects.push("Shooting");
                    disabledSubjects.push("Melee");
                    break;
                case "Skilled Labor":
                    disabledSubjects.push("Construction");
                    disabledSubjects.push("Mining");
                    disabledSubjects.push("Cooking");
                    disabledSubjects.push("Plants");
                    disabledSubjects.push("Crafting");
                    break;
                case "Caring":
                    disabledSubjects.push("Medical");
                    break;
                case "Dumb Labor":
                    break;
                default:
                    disabledSubjects.push(taskText);
                    break;
            }
        }

        for (let i = 0; i < disabledSubjects.length; i++) {
            var subjectName = disabledSubjects[i];
            var skillRange = document.getElementById("skillRange_" + subjectName);
            var modDisplay = document.getElementById("modifierName_" + subjectName);
            var skillRangeDisplayText = document.getElementById("skillText_" + subjectName);
            skillRange.disabled = true;
            modDisplay.innerHTML = " DISABLED";
            skillRangeDisplayText = "DISABLED";
        }

        backgroundIndexData.value = parseInt(index);

        subjArray.forEach((subj) => nudgeValue(0, 'skillRange_' + subj.name));

    }

    function showPassionVal(newValue, subjectName) {
        var passionRangeText = document.getElementById('passionText_' + subjectName);
        var subjectData = document.getElementById('subjectDataPassion_' + subjectName);

        var humanReadableText = "Something went wrong! You shouldn't see this. My bad.";
        switch (parseInt(newValue)) {
            case 0: humanReadableText = "Terrible"; break;
            case 1: humanReadableText = "Aight"; break;
            case 2: humanReadableText = "Fine"; break;
            case 3: humanReadableText = "Great"; break;
            case 4: humanReadableText = "Amazing"; break;
        }

        passionRangeText.innerHTML = humanReadableText;
        subjectData.value = parseInt(newValue);

    }

    function showSkillVal(newValue, subjectName) {
        var skillRangeText = document.getElementById('skillText_' + subjectName);
        var skillFamiliarityDisplay = document.getElementById("familiarityDisplay_" + subjectName)
        var subjectData = document.getElementById('subjectDataLevel_' + subjectName);
        var subjectDataDisabled = document.getElementById('subjectDataDisabled_' + subjectName);
        var statModElement = document.getElementById('backstoryChildStatMod_' + subjectName);
        var statMod = parseInt(statModElement.value);
        statModElement = document.getElementById('backstoryAdultStatMod_' + subjectName);
        statMod += parseInt(statModElement.value);
        var netVal = parseInt(newValue) + statMod;
        if (netVal > 20) { netVal = 20; }
        if (netVal < 0) { netVal = 0; }

        var humanReadableText = "Something went wrong! You shouldn't see this. My bad.";
        switch (netVal) {
            case 0: humanReadableText = "Barely heard of it"; break;
            case 1: humanReadableText = "Utter Beginner"; break;
            case 2: humanReadableText = "Beginner"; break;
            case 3: humanReadableText = "Basic Familiarity"; break;
            case 4: humanReadableText = "Some Familiarity"; break;
            case 5: humanReadableText = "Significant Familiarity"; break;
            case 6: humanReadableText = "Capable Amateur"; break;
            case 7: humanReadableText = "Weak Professional"; break;
            case 8: humanReadableText = "Employable Professional"; break;
            case 9: humanReadableText = "Solid Professional"; break;
            case 10: humanReadableText = "Skilled Professional"; break;
            case 11: humanReadableText = "Very skilled Professional"; break;
            case 12: humanReadableText = "Expert"; break;
            case 13: humanReadableText = "Strong Expert"; break;
            case 14: humanReadableText = "Master"; break;
            case 15: humanReadableText = "Strong Master"; break;
            case 16: humanReadableText = "Region-Known Master"; break;
            case 17: humanReadableText = "Region-Leading Master"; break;
            case 18: humanReadableText = "Planet-Known Master"; break;
            case 19: humanReadableText = "Planet-Leading Master"; break;
            case 20: humanReadableText = "Legendary Master"; break;
        }

        var rangeSlider = document.getElementById('skillRange_' + subjectName);
        subjectDataDisabled.value = false;
        if (rangeSlider.disabled) {
            skillRangeText.innerHTML = "DISABLED";
            skillFamiliarityDisplay.innerHTML = "";
            subjectData.value = 0;
            subjectDataDisabled.value = true;
            return;
        }

        skillRangeText.innerHTML = humanReadableText;
        skillFamiliarityDisplay.innerHTML = "(" + humanReadableText + ")"
        subjectData.value = parseInt(newValue);
    }

    function nudgeValue(nudgeAmount, rangeElementID) {

        var rangeElement = document.getElementById(rangeElementID.toString());
        if (!rangeElement.disabled) {
            rangeElement.value = parseInt(rangeElement.value) + parseInt(nudgeAmount);
        }
        rangeElement.dispatchEvent(new Event('input'));
    }


</script>
