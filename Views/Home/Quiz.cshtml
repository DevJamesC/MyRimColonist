@using System.Collections;
@using WebApplication1.Controllers;

@model RimStatsModel

<h1 style="color:white">What's your stats?</h1>

@using (Html.BeginForm())
{
    @Html.HiddenFor(model=>Model.childhoodBackstory,  new { @id = "BackstoryChild"})
    @Html.HiddenFor(model=>Model.adultBackstory,  new { @id = "BackstoryAdult"})

    @for (int i = 0; i < Model.Subjects.Length; i++)
    {
        @Html.HiddenFor(model=>Model.Subjects[i].Name)
        @Html.HiddenFor(model=>Model.Subjects[i].PassionVal, new { @id = "subjectDataPassion_"+Model.Subjects[i].Name })
        @Html.HiddenFor(model=>Model.Subjects[i].Level, new { @id = "subjectDataLevel_"+Model.Subjects[i].Name })
    }

    @for (int i = 0; i < Model.childhoodBackstoryList.Length; i++)
    {
        @Html.HiddenFor(model=>Model.childhoodBackstoryList[i].Name, new { @id = "backstoryChildName_"+Model.childhoodBackstoryList[i].Name })
        @Html.HiddenFor(model=>Model.childhoodBackstoryList[i].Description, new { @id = "backstoryChildDescription_"+Model.childhoodBackstoryList[i].Name, @value=Model.childhoodBackstoryList[i].Description})
        for (int j = 0; j < Model.childhoodBackstoryList[i].SubjectStatChanges.Count; j++)
        {
            @Html.HiddenFor(model=>Model.childhoodBackstoryList[i].SubjectStatChanges[j].Name, new { @id = "backstoryChildStatChangeName_"+Model.childhoodBackstoryList[i].SubjectStatChanges[j].Name })
            @Html.HiddenFor(model=>Model.childhoodBackstoryList[i].SubjectStatChanges[j].Level, new { @id = "backstoryChildStatChangeLevel_"+Model.childhoodBackstoryList[i].SubjectStatChanges[j].Level })
        }
        for (int j = 0; j < Model.childhoodBackstoryList[i].DisabledTasks.Length; j++)
        {
            @Html.HiddenFor(model=>Model.childhoodBackstoryList[i].DisabledTasks[j], new { @id = "backstoryChildDisabledTasks_"+Model.childhoodBackstoryList[i].DisabledTasks[j] })

        }
    }


    @*Background*@
    <div class="my-2">
        <h2 class="col-lg-12 text-center" style="color:white">Background</h2>
        <div class="d-flex justify-content-start gap-1">
            <div>
                <p class="text-center" style="color:white">
                    First Name
                </p>
                <p>
                    @Html.TextBoxFor(s=>s.FirstName)
                </p>
            </div>
            <div>
                <p class="text-center" style="color:white">
                    Nickname
                </p>
                <p>
                    @Html.TextBoxFor(s=>s.NickName)
                </p>
            </div>
            <div>
                <p class="text-center" style="color:white">
                    Last Name
                </p>
                <p>
                    @Html.TextBoxFor(s=>s.LastName)
                </p>
            </div>
        </div>
    </div>
    @*Backgrounds*@
    <div class="accordion" id="accordionBackgrounds">
        @*Childhood backgrounds*@
        <div class="accordion-item bg-dark">
            <h2 class="accordion-header">
                <button class="accordion-button bg-secondary" type="button" data-bs-toggle="collapse" data-bs-target="#collapse_BackgroundChild" aria-expanded="false" aria-controls="collapse_BackgroundChild">
                    <h5 style="color:white">Childhood Backstory</h5>
                </button>
            </h2>
            <div id="collapse_BackgroundChild" class="accordion-collapse collapse" data-bs-parent="#accordionBackgrounds">
                <div class="accordion-body gap-1">
                    @foreach (RimworldBackstory backstory in Model.childhoodBackstoryList)
                    {
                        <button type="button" class="btn btn-primary" onclick="applyBackground('@backstory.Name','true')">@backstory.Name</button>
                    }
                </div>
            </div>
        </div>
        @*Adult backgrounds*@
        <div class="accordion-item bg-dark">
            <h2 class="accordion-header">
                <button class="accordion-button bg-secondary" type="button" data-bs-toggle="collapse" data-bs-target="#collapse_BackgroundAdult" aria-expanded="false" aria-controls="collapse_BackgroundAdult">
                    <h5 style="color:white">Adult Backstory</h5>
                </button>
            </h2>
            <div id="collapse_BackgroundAdult" class="accordion-collapse collapse" data-bs-parent="#accordionBackgrounds">
                <div class="accordion-body">
                    <p style="color:white">Adult backstories here...</p>
                </div>
            </div>
        </div>
    </div>

    @*Traits*@
    <div class="my-2">
        <h2 class="col-lg-12 text-center" style="color:white">Traits</h2>
    </div>

    @*Subjects*@
    <div class="my-2">
        <h2 class="col-lg-12 text-center" style="color:white">Subjects</h2>

        <div class="accordion" id="accordion1">
            @foreach (RimworldSubjectData subject in Model.Subjects)
            {
                <div class="accordion-item bg-dark">
                    @*Subject Header*@
                    <h2 class="accordion-header">
                        <button class="accordion-button bg-secondary" type="button" data-bs-toggle="collapse" data-bs-target="#collapse_@subject.Name" aria-expanded="false" aria-controls="collapse_@subject.Name">
                            <h5 style="color:white">@subject.Name</h5>
                        </button>
                    </h2>

                    <div id="collapse_@subject.Name" class="accordion-collapse collapse" data-bs-parent="#accordion1">
                        <div class="accordion-body">
                            @*Passion slider*@
                            <div class="col-4">
                                <label for="passionRange_@subject.Name" class="form-label" style="color:white">How would you feel doing @subject.Name work?</label>
                                <div class="d-flex justify-content-center align-items-center">
                                    @*Minus Button*@
                                    <button type="button" class="btn btn-dark" onclick="nudgeValue(-1,'passionRange_@subject.Name')">
                                        <i class="bi-emoji-frown fs-3" style="color:white"></i>
                                    </button>
                                    @*Range Slider*@
                                    <input type="range" class="form-range  px-3" min="0" max="4" id="passionRange_@subject.Name" oninput="showPassionVal(this.value,'@subject.Name')" onchange="showPassionVal(this.value,'@subject.Name')">
                                    @*Plus Button*@
                                    <button type="button" class="btn btn-dark" onclick="nudgeValue(1,'passionRange_@subject.Name')">
                                        <i class="bi-emoji-smile fs-3" style="color:white"></i>
                                    </button>

                                </div>
                                <p id="passionText_@subject.Name" class="d-flex justify-content-center align-items-center" style="color:white">Aight</p>
                            </div>

                            @*Skill slider*@
                            <div class="col-4">
                                <label for="skillRange_@subject.Name" class="form-label" style="color:white">How good are you at @subject.Name work?</label>
                                <div class="d-flex justify-content-center align-items-center">
                                    @*Minus Button*@
                                    <button type="button" class="btn btn-dark" onclick="nudgeValue(-1,'skillRange_@subject.Name')">
                                        <i class="bi-emoji-frown fs-3" style="color:white"></i>
                                    </button>
                                    @*Range Slider*@
                                    <input type="range" class="form-range  px-3" min="0" max="20" id="skillRange_@subject.Name" oninput="showSkillVal(this.value,'@subject.Name')" onchange="showSkillVal(this.value,'@subject.Name')">
                                    @*Plus Button*@
                                    <button type="button" class="btn btn-dark" onclick="nudgeValue(1,'skillRange_@subject.Name')">
                                        <i class="bi-emoji-smile fs-3" style="color:white"></i>
                                    </button>

                                </div>
                                <p id="skillText_@subject.Name" class="d-flex justify-content-center align-items-center" style="color:white">Barely heard of it</p>
                            </div>

                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <button type="submit" class="btn btn-primary btn-lg align-content-center my-3">Finish</button>
}
<script>

    var subjArray = new Array();
    subjArray = @Html.Raw(Json.Serialize(Model.Subjects));

    subjArray.forEach((subj) => document.getElementById('passionRange_' + subj.name).defaultValue = 1);
    subjArray.forEach((subj) => document.getElementById('skillRange_' + subj.name).defaultValue = 0);

    function applyBackground(backgroundName, isChild) {
        isChild = isChild == "true";
        var preface = isChild ? "backstoryChild" : "backstoryAdult";
        var description = document.getElementById(preface + 'Description_' + backgroundName).value;
        console.log(backgroundName);
        console.log(description);

    }

    function showPassionVal(newValue, subjectName) {
        var passionRangeText = document.getElementById('passionText_' + subjectName);
        var subjectData = document.getElementById('subjectDataPassion_' + subjectName);

        var humanReadableText = "Something went wrong! You shouldn't see this. My bad.";
        switch (parseInt(newValue)) {
            case 0: humanReadableText = "Terrible"; break;
            case 1: humanReadableText = "Aight"; break;
            case 2: humanReadableText = "Fine"; break;
            case 3: humanReadableText = "Great"; break;
            case 4: humanReadableText = "Amazing"; break;
        }

        passionRangeText.innerHTML = humanReadableText;
        subjectData.value = parseInt(newValue);
    }

    function showSkillVal(newValue, subjectName) {
        var skillRangeText = document.getElementById('skillText_' + subjectName);
        var subjectData = document.getElementById('subjectDataLevel_' + subjectName);


        var humanReadableText = "Something went wrong! You shouldn't see this. My bad.";
        switch (parseInt(newValue)) {
            case 0: humanReadableText = "Barely heard of it"; break;
            case 1: humanReadableText = "Utter Beginner"; break;
            case 2: humanReadableText = "Beginner"; break;
            case 3: humanReadableText = "Basic Familiarity"; break;
            case 4: humanReadableText = "Some Familiarity"; break;
            case 5: humanReadableText = "Significant Familiarity"; break;
            case 6: humanReadableText = "Capable Amateur"; break;
            case 7: humanReadableText = "Weak Professional"; break;
            case 8: humanReadableText = "Employable Professional"; break;
            case 9: humanReadableText = "Solid Professional"; break;
            case 10: humanReadableText = "Skilled Professional"; break;
            case 11: humanReadableText = "Very skilled Professional"; break;
            case 12: humanReadableText = "Expert"; break;
            case 13: humanReadableText = "Strong Expert"; break;
            case 14: humanReadableText = "Master"; break;
            case 15: humanReadableText = "Strong Master"; break;
            case 16: humanReadableText = "Region-Known Master"; break;
            case 17: humanReadableText = "Region-Leading Master"; break;
            case 18: humanReadableText = "Planet-Known Master"; break;
            case 19: humanReadableText = "Planet-Leading Master"; break;
            case 20: humanReadableText = "Legendary Master"; break; s
        }

        skillRangeText.innerHTML = humanReadableText;
        subjectData.value = parseInt(newValue);
    }

    function nudgeValue(nudgeAmount, rangeElementID) {
        console.log(rangeElementID);
        var rangeElement = document.getElementById(rangeElementID.toString());
        rangeElement.value = parseInt(rangeElement.value) + parseInt(nudgeAmount);
        rangeElement.dispatchEvent(new Event('input'));
    }


</script>
